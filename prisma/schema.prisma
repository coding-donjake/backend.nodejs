// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String      @id @default(uuid())
  role     AdminRole
  status   AdminStatus @default(ok)
  User     User?       @relation(fields: [userId], references: [id])
  userId   String      @unique
  AdminLog AdminLog[]
}

model AdminLog {
  id         String   @id @default(uuid())
  datetime   DateTime @default(now())
  type       String   @db.VarChar(255)
  content    Json     @db.Json
  Admin      Admin?   @relation(fields: [adminId], references: [id])
  adminId    String?
  Operator   User?    @relation("Operator", fields: [operatorId], references: [id])
  operatorId String?
}

enum AdminRole {
  admin
  staff
}

enum AdminStatus {
  ok
  removed
}

model Application {
  id               String            @id @default(uuid())
  datetimeApplied  DateTime          @default(now())
  datetimeAccepted DateTime?
  datetimeDeclined DateTime?
  pitch            String            @db.Text
  status           ApplicationStatus @default(pending)
  Internship       Internship?       @relation(fields: [internshipId], references: [id])
  internshipId     String?
  Resume           Resume?           @relation(fields: [resumeId], references: [id])
  resumeId         String?
  User             User?             @relation(fields: [userId], references: [id])
  userId           String?
  ApplicationLog   ApplicationLog[]
}

model ApplicationLog {
  id            String       @id @default(uuid())
  datetime      DateTime     @default(now())
  type          String       @db.VarChar(255)
  content       Json         @db.Json
  Application   Application? @relation(fields: [applicationId], references: [id])
  applicationId String?
  Operator      User?        @relation("Operator", fields: [operatorId], references: [id])
  operatorId    String?
}

enum ApplicationStatus {
  pending
  accepted
  declined
  cancelled
  removed
}

model Company {
  id          String        @id @default(uuid())
  name        String        @db.VarChar(255)
  description String        @db.TinyText
  address     String        @db.VarChar(255)
  email       String        @db.VarChar(255)
  type        String        @db.VarChar(255)
  status      CompanyStatus @default(unverified)
  Internship  Internship[]
  CompanyLog  CompanyLog[]
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?
}

model CompanyLog {
  id         String   @id @default(uuid())
  datetime   DateTime @default(now())
  type       String   @db.VarChar(255)
  content    Json     @db.Json
  Company    Company? @relation(fields: [companyId], references: [id])
  companyId  String?
  Operator   User?    @relation("Operator", fields: [operatorId], references: [id])
  operatorId String?
}

enum CompanyStatus {
  unverified
  ok
  suspended
  removed
}

model Internship {
  id            String           @id @default(uuid())
  position      String           @db.VarChar(255)
  description   String           @db.Text
  type          InternshipType
  slots         Int?
  status        InternshipStatus @default(ok)
  Application   Application[]
  InternshipLog InternshipLog[]
  Company       Company?         @relation(fields: [companyId], references: [id])
  companyId     String?
}

model InternshipLog {
  id           String      @id @default(uuid())
  datetime     DateTime    @default(now())
  type         String      @db.VarChar(255)
  content      Json        @db.Json
  Internship   Internship? @relation(fields: [internshipId], references: [id])
  internshipId String?
  Operator     User?       @relation("Operator", fields: [operatorId], references: [id])
  operatorId   String?
}

enum InternshipStatus {
  ok
  closed
  removed
}

enum InternshipType {
  intern
  job
}

model Resume {
  id          String        @id @default(uuid())
  fileName    String        @db.VarChar(255)
  storageName String        @db.VarChar(255)
  status      ResumeStatus  @default(ok)
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?
  Application Application[]
  ResumeLog   ResumeLog[]
}

model ResumeLog {
  id         String   @id @default(uuid())
  datetime   DateTime @default(now())
  type       String   @db.VarChar(255)
  content    Json     @db.Json
  Resume     Resume?  @relation(fields: [resumeId], references: [id])
  resumeId   String?
  Operator   User?    @relation("Operator", fields: [operatorId], references: [id])
  operatorId String?
}

enum ResumeStatus {
  ok
  removed
}

model Student {
  id         String       @id @default(uuid())
  schoolId   String       @db.VarChar(255)
  course     String       @db.VarChar(255)
  year       Int
  section    String       @db.VarChar(255)
  User       User?        @relation(fields: [userId], references: [id])
  userId     String       @unique
  StudentLog StudentLog[]
}

model StudentLog {
  id         String   @id @default(uuid())
  datetime   DateTime @default(now())
  type       String   @db.VarChar(255)
  content    Json     @db.Json
  Student    Student? @relation(fields: [studentId], references: [id])
  studentId  String   @unique
  Operator   User?    @relation("Operator", fields: [operatorId], references: [id])
  operatorId String?
}

model User {
  id                     String           @id @default(uuid())
  username               String           @unique @default(uuid())
  password               String           @db.VarChar(255)
  status                 UserStatus       @default(unverified)
  Admin                  Admin?
  Application            Application[]
  Company                Company[]
  Resume                 Resume[]
  Student                Student?
  UserInformation        UserInformation?
  UserLog                UserLog[]
  AdminLogOperator       AdminLog[]       @relation("Operator")
  ApplicationLogOperator ApplicationLog[] @relation("Operator")
  CompanyLogOperator     CompanyLog[]     @relation("Operator")
  InternshipLogOperator  InternshipLog[]  @relation("Operator")
  ResumeLogOperator      ResumeLog[]      @relation("Operator")
  StudentLogOperator     StudentLog[]     @relation("Operator")
  UserLogOperator        UserLog[]        @relation("Operator")
}

model UserLog {
  id         String   @id @default(uuid())
  datetime   DateTime @default(now())
  type       String   @db.VarChar(255)
  content    Json     @db.Json
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
  Operator   User?    @relation("Operator", fields: [operatorId], references: [id])
  operatorId String?
}

enum UserStatus {
  nur
  unverified
  ok
  deactivated
  removed
  suspended
}

model UserInformation {
  id         String    @id @default(uuid())
  lastname   String    @db.VarChar(255)
  firstname  String    @db.VarChar(255)
  middlename String    @db.VarChar(255)
  suffix     String    @db.VarChar(255)
  gender     Gender
  birthdate  DateTime? @db.Date
  User       User?     @relation(fields: [userId], references: [id])
  userId     String    @unique
}

enum Gender {
  male
  female
}
