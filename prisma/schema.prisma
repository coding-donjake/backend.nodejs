// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String      @id @default(uuid())
  role     AdminRole
  status   AdminStatus @default(ok)
  User     User?       @relation(fields: [userId], references: [id])
  userId   String      @unique
  AdminLog AdminLog[]
}

model AdminLog {
  id         String   @id @default(uuid())
  datetime   DateTime @default(now())
  type       String   @db.VarChar(20)
  content    Json     @db.Json
  Admin      Admin?   @relation(fields: [adminId], references: [id])
  adminId    String?
  Operator   User?    @relation("Operator", fields: [operatorId], references: [id])
  operatorId String?
}

enum AdminRole {
  admin
  staff
}

enum AdminStatus {
  ok
  removed
}

model Company {
  id          String        @id @default(uuid())
  name        String        @db.VarChar(255)
  description String        @db.TinyText
  address     String        @db.VarChar(255)
  email       String        @db.VarChar(255)
  type        String        @db.VarChar(255)
  status      CompanyStatus
  CompanyLog  CompanyLog[]
}

model CompanyLog {
  id         String   @id @default(uuid())
  datetime   DateTime @default(now())
  type       String   @db.VarChar(20)
  content    Json     @db.Json
  Company    Company? @relation(fields: [companyId], references: [id])
  companyId  String?
  Operator   User?    @relation("Operator", fields: [operatorId], references: [id])
  operatorId String?
}

enum CompanyStatus {
  unverified
  ok
  suspended
  removed
}

model User {
  id                         String               @id @default(uuid())
  username                   String               @unique @default(uuid())
  password                   String               @db.VarChar(255)
  status                     UserStatus           @default(unverified)
  UserInformation            UserInformation?
  Admin                      Admin?
  UserLog                    UserLog[]
  AdminLogOperator           AdminLog[]           @relation("Operator")
  CompanyLogOperator         CompanyLog[]         @relation("Operator")
  UserLogOperator            UserLog[]            @relation("Operator")
  UserInformationLogOperator UserInformationLog[] @relation("Operator")
}

model UserLog {
  id         String   @id @default(uuid())
  datetime   DateTime @default(now())
  type       String   @db.VarChar(20)
  content    Json     @db.Json
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
  Operator   User?    @relation("Operator", fields: [operatorId], references: [id])
  operatorId String?
}

enum UserStatus {
  nur
  unverified
  ok
  deactivated
  removed
  suspended
}

model UserInformation {
  id                 String               @id @default(uuid())
  lastname           String               @db.VarChar(255)
  firstname          String               @db.VarChar(255)
  middlename         String               @db.VarChar(255)
  suffix             String               @db.VarChar(20)
  gender             Gender
  birthdate          DateTime             @db.Date
  User               User?                @relation(fields: [userId], references: [id])
  userId             String               @unique
  UserInformationLog UserInformationLog[]
}

model UserInformationLog {
  id                String           @id @default(uuid())
  datetime          DateTime         @default(now())
  type              String           @db.VarChar(20)
  content           Json             @db.Json
  UserInformation   UserInformation? @relation(fields: [userInformationId], references: [id])
  userInformationId String?
  Operator          User?            @relation("Operator", fields: [operatorId], references: [id])
  operatorId        String?
}

enum Gender {
  male
  female
}
